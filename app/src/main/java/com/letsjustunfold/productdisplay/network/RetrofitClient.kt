package com.letsjustunfold.productdisplay.network

import com.google.gson.GsonBuilder
import com.letsjustunfold.ProductApiService
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

/**
 * Singleton object for configuring and providing Retrofit instances.
 * This ensures that the Retrofit setup is done once and reused throughout the application.
 */
object RetrofitClient {

    // Base URL for the API endpoints. All API calls will be relative to this URL.
    private const val BASE_URL = "https://klinq.com/"

    /**
     * Lazily initialized Retrofit instance. It is created only when first accessed.
     * Configured with the base URL and Gson converter for JSON parsing.
     */
    val retrofit: Retrofit by lazy {
        // Gson configuration for parsing JSON responses.
        // .setLenient() is added to handle potentially malformed JSON.
        val gson = GsonBuilder()
            .setLenient()
            .create()

        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create(gson)) // Uses Gson for converting JSON to Kotlin objects
            .build()
    }

    /**
     * Lazily initialized instance of [ProductApiService].
     * This is the interface that defines your API calls, generated by Retrofit.
     * Use `RetrofitClient.apiService` to make network requests.
     */
    val apiService: ProductApiService by lazy {
        retrofit.create(ProductApiService::class.java)
    }
}